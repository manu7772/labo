<?php

namespace AcmeGroup\LaboBundle\Entity;

use AcmeGroup\LaboBundle\Entity\baseRepository;

/**
 * voteArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class voteArticleRepository extends baseRepository {

	// Ã  supprimer
	// public function findVotesByArticle(\AcmeGroup\LaboBundle\Entity\article $article) {
	// 	$qb = $this->createQueryBuilder('element');
	// 	$qb->where('element.defaut = :true')
	// 		->setParameter('true', 1);
	// 	return $qb->getQuery()->getResult();
	// }

	public function findVote($article, $user) {
		if(is_object($article)) $article = $article->getId();
		if(is_object($user)) $user = $user->getId();
		$qb = $this->createQueryBuilder('element');
		$qb->where('element.user = :userid')
			->setParameter('userid', $user)
			->andWhere('element.article = :artid')
			->setParameter('artid', $article);
		return $qb->getQuery()->getResult();
	}

	/**
	 * findAllVotes
	 * Renvoie tous les votes concernant un article
	 * @param objet article ou id article
	 */
	public function findAllVotes($article) {
		if(is_object($article)) $article = $article->getId();
		$qb = $this->createQueryBuilder('element');
		$qb->where('element.article = :art')
			->setParameter('art', $article)
			->leftJoin('element.user', 'u')
			->addSelect('u')
			->orderBy('element.dateCreation');
		return $qb->getQuery()->getResult();
	}

	/**
	 * getCalcNoteArticle
	 * Renvoie la note globale de l'article $article
	 * @param objet article ou id article
	 * @return integer
	 */
	public function getCalcNoteArticle($article) {
		if(is_object($article)) $article = $article->getId();
		$qb = $this->createQueryBuilder('element');
		$qb->where('element.article = :art')
			->setParameter('art', $article);
		$votes = $qb->getQuery()->getResult();
		$cumul = 0;
		foreach($votes as $vote) {
			$cumul += $vote->getNote();
		}
		if(count($votes) > 0) return round($cumul / count($votes));
			else return 0;
	}

}
