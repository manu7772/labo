<?php

namespace AcmeGroup\LaboBundle\Entity;

use AcmeGroup\LaboBundle\Entity\baseRepository;

/**
 * factureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class factureRepository extends baseRepository {

	/**
	 * getNbVentesArticle
	 * Renvoie le nombre de vente pour l'article $id
	 * @param objet article ou id article
	 * @return integer
	 */
	public function getNbVentesArticle($article) {
		if(is_object($article)) $article = $article->getId();
		$qb = $this->createQueryBuilder('element');
		$qb->join('element.articles', 'ar')
			->where('ar.id = :art')
			->setParameter('art', $article)
			->join('element.statut', 'st')
			->andWhere('st.nom like :sta')
			->setParameter('sta', 'Actif');
		$factures = $qb->getQuery()->getResult();
		$cumul = 0;
		foreach($factures as $facture) {
			$detail = $facture->getDetailbyarticle();
			if(isset($detail[$article]["quantite"])) {
				$cumul += $detail[$article]["quantite"];
			}
		}
		return $cumul;
	}

	public function getFacturesOfUser($user, $tri = null, $sens = "DESC") {
		if(!in_array($sens, array("ASC","DESC"))) $sens = "DESC";
		$statut = array("Actif");
		if(is_object($user)) {
			// ajoute les factures test pour SUPER_ADMIN
			if(in_array("ROLE_SUPER_ADMIN", $user->getRoles())) { $statut[] = "Test"; }
			$user = $user->getId();
		}
		//
		$qb = $this->createQueryBuilder('element');
		$qb->join('element.propUser', 'usr')
			->where('usr.id = :u')
			->setParameter('u', $user)
			->join('element.statut', 'st')
			->andWhere($qb->expr()->in('st.nom', $statut));
		if($tri === null) {
			$qb->orderBy('element.dateCreation', "ASC");
		} else {
			$qb->orderBy('element.'.$tri, $sens)
				->addOrderBy('element.dateCreation', "ASC");
		}
		return $qb->getQuery()->getResult();
	}

	/**
	 * getVentesErreur
	 * @return array
	 */
	public function getVentesErreur() {
		$qb = $this->createQueryBuilder('element');
		$qb->where('element.stade = :stad')
			->setParameter('stad', "100")
			->orderBy('element.dateCreation', 'ASC');
		return $qb->getQuery()->getResult();
	}

	/**
	 * getVentesCommande
	 * @return array
	 */
	public function getVentesCommande() {
		$qb = $this->createQueryBuilder('element');
		$qb->where('element.stade = :stad')
			->setParameter('stad', "0")
			->orderBy('element.dateCreation', 'ASC');
		return $qb->getQuery()->getResult();
	}

	/**
	 * getVentesLivraison
	 * @return array
	 */
	public function getVentesLivraison() {
		$qb = $this->createQueryBuilder('element');
		$qb->where('element.stade = :stad')
			->setParameter('stad', "1")
			->orderBy('element.dateCreation', 'ASC');
		return $qb->getQuery()->getResult();
	}

	/**
	 * getVentesTermine
	 * @return array
	 */
	public function getVentesTermine() {
		$qb = $this->createQueryBuilder('element');
		$qb->where('element.stade = :stad')
			->setParameter('stad', "2")
			->orderBy('element.dateCreation', 'ASC');
		return $qb->getQuery()->getResult();
	}

	/**
	 * getVentesAnnule
	 * @return array
	 */
	public function getVentesAnnule() {
		$qb = $this->createQueryBuilder('element');
		$qb->where('element.stade = :stad')
			->setParameter('stad', "3")
			->orderBy('element.dateCreation', 'ASC');
		return $qb->getQuery()->getResult();
	}

}
