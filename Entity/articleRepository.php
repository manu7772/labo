<?php

namespace labo\Bundle\TestmanuBundle\Entity;

use labo\Bundle\TestmanuBundle\Entity\laboBaseRepository;

/**
 * articleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class articleRepository extends laboBaseRepository {

	/**
	 * findArticleFicheWithUser
	 * Renvoie les informations sur l'article $id pour création de la fiche
	 * @param integer
	 */
	public function findArticleFicheWithUser($id) {
		$qb = $this->createQueryBuilder('element');
		$qb->where('element.id = :id')
			->setParameter('id', $id)
			->leftJoin('element.voteUsers', 'votU')
			->addSelect('votU')
			->orderBy('votU.dateCreation', 'DESC')
			->leftJoin('votU.user', 'users') // ajout des utilisateurs qui ont commenté l'article
			->addSelect('users')
			->leftJoin('element.voteBlacks', 'votB')
			->addSelect('votB')
			->leftJoin('element.ficheCreatives', 'fich')
			->addSelect('fich')
			->leftJoin('element.videos', 'vid')
			->addSelect('vid')
			->leftJoin('element.imagePpale', 'i')
			->addSelect('i')
			->leftJoin('element.images', 'ii')
			->addSelect('ii')
			->leftJoin('element.reseaus', 'r')
			->addSelect('r');
		return $qb->getQuery()->getResult();
	}

	/**
	* findOutputs
	* requête pour outPuts2
	*
	* @param array $params
	*/
	public function findOutputs($params) {
		$qb = $this->createQueryBuilder('element');
		$qb->leftJoin('element.imagePpale', 'ip')
			->addSelect('ip')
			->leftJoin('element.marque', 'm')
			->addSelect('m')
			->leftJoin('m.logoImage', 'li')
			->addSelect('li');
		$qb = $this->excludeExpired($qb);
		$qb = $this->withVersion($qb);
		$qb = $this->defaultStatut($qb);
		$qb->setMaxResults($nb) // limite le nombre de résultats
			->orderBy('element.plusVisible, element.notation', 'DESC'); // Puis par notation
		return $qb->getQuery()->getResult();
	}

	/**
	* findXArticles
	* Renvoie X ($nb) articles
	*
	* @param int $nb
	*/
	public function findXArticles($nb) {
		$qb = $this->createQueryBuilder('element');
		$qb->leftJoin('element.imagePpale', 'ip')
			->addSelect('ip')
			->leftJoin('element.marque', 'm')
			->addSelect('m')
			->leftJoin('m.logoImage', 'li')
			->addSelect('li');
		$qb = $this->excludeExpired($qb);
		$qb = $this->withVersion($qb);
		$qb = $this->defaultStatut($qb);
		$qb->setMaxResults($nb) // limite le nombre de résultats
			->orderBy('element.plusVisible', 'DESC') // Sélectionne en premier les articles "plus visibles"
			->addOrderBy('element.notation', 'DESC'); // Puis par notation
		return $qb->getQuery()->getResult();
	}

	/**
	* findArtByCategorie
	* Liste des produits d'une catégorie
	*
	* @param string 	$slug de categorie
	*/
	public function findArtByCategorie($params) {
		if(is_string($params)) $slug = array($params);
			else $slug = $params;
		// var_dump($slug);
		//
		$qb = $this->createQueryBuilder('element');
		$qb->join('element.categories', 'c')
			->where($qb->expr()->in('c.slug', $slug));
		// $qb = $this->excludeExpired($qb);
		$qb = $this->withVersion($qb);
		$qb = $this->defaultStatut($qb);
		$qb->leftJoin('element.imagePpale', 'ip')
			->addSelect('ip')
			->leftJoin('element.images', 'ii')
			->addSelect('ii')
			->leftJoin('element.reseaus', 'r')
			->addSelect('r');
		// $qb->groupBy('r'); // regrouper par réseaux
		$qb->orderBy('r.id', 'ASC')
			->addOrderBy('element.prix', 'ASC');
		return $qb->getQuery()->getResult();
	}

	/**
	* findArtByReseau
	* Liste des produits en vente en E-Boutique
	*
	* @param string $reseauNom
	*/
	public function findArtByReseau($reseauNom, $tri = null) {
		$qb = $this->createQueryBuilder('element');
		$qb->join('element.categories', 'c')
			->join('element.reseaus', 'rr')
			->where('rr.nom = :reso')
			->setParameter('reso', $reseauNom);
		// $qb = $this->excludeExpired($qb);
		$qb = $this->withVersion($qb);
		$qb = $this->defaultStatut($qb);
		$qb->leftJoin('element.imagePpale', 'ip')
			->addSelect('ip')
			->leftJoin('element.images', 'ii')
			->addSelect('ii');
		if(is_array($tri)) {
			$meth = 'orderBy';
			foreach ($tri as $key => $value) {
				if($value !== 'ASC') $value == 'DESC';
				$qb->$meth('element.'.$key, $value);
				$meth = 'addOrderBy';
			}
		} else {
			$qb->orderBy('c.id', 'DESC')
				->addOrderBy('element.prix', 'ASC');
		}
		return $qb->getQuery()->getResult();
	}

	/**
	* findArtByReseau
	* Liste des produits en vente en e-commerce
	*
	* @param string $reseauNom
	*/
	public function findArtECommerce() {
		$reseauNom = "e-commerce";
		$qb = $this->createQueryBuilder('element');
		$qb->join('element.categories', 'c')
			->join('element.reseaus', 'rr')
			->where('rr.nom = :reso')
			->setParameter('reso', $reseauNom);
		// $qb = $this->excludeExpired($qb);
		// $qb = $this->withVersion($qb);
		// $qb = $this->defaultStatut($qb);
		$qb->leftJoin('element.imagePpale', 'ip')
			->addSelect('ip')
			->leftJoin('element.images', 'ii')
			->addSelect('ii')
			->leftJoin('element.statut', 'st')
			->addSelect('st')
			->leftJoin('element.tauxTVA', 'tva')
			->addSelect('tva')
			->leftJoin('element.categories', 'cat')
			->addSelect('cat')
			->leftJoin('element.videos', 'vid')
			->addSelect('vid')
			->leftJoin('element.ficheCreatives', 'fich')
			->addSelect('fich')
			->leftJoin('element.reseaus', 'res')
			->addSelect('res');
		$qb->orderBy('element.ventes', 'DESC')
			// ->addOrderBy('element.prix', 'ASC')
		;
		return $qb->getQuery()->getResult();
	}

	public function aeFindAll() {
		$qb = $this->createQueryBuilder('element');
		$qb = $this->withVersion($qb);
		$qb = $this->defaultStatut($qb);
		$qb->addOrderBy('element.nom', 'DESC');
		return $qb->getQuery()->getResult();
	}


}
